########################   mirror-ngx by zj   ###################

#lua_socket_log_errors off;

lua_code_cache on; # 关闭lua_cache 缓存 用于调试， 线上需要开启 设置为on
lua_need_request_body on; #开启post

# 需要根据自己服务器的情况进行配置
lua_package_path "/opt/openresty/mirror-ngx/lib/?.lua;/opt/openresty/lualib/?.lua";
lua_package_cpath "/opt/openresty/mirror-ngx/lib/?.so;;";

lua_regex_cache_max_entries 1024000;
# 1m 存储约1000+条IP数据

lua_shared_dict config_dict 10m;    # 保存 config 中部分配置
lua_shared_dict statistics_dict  100m;     # statistics_Mod 统计模块 使用的 dict
lua_shared_dict passive_dict  500m;   # passive_Mod 被动扫描模块 使用的 dict

more_set_headers 'Server: mirror-ngx';

#limit_req_zone  $binary_remote_addr zone=allips:50m rate=100r/s;
#limit_conn_zone $binary_remote_addr zone=addr:50m;

init_by_lua_file  /opt/openresty/mirror-ngx/init.lua;

init_worker_by_lua_file /opt/openresty/mirror-ngx/i_worker.lua;

#set_by_lua_file /opt/openresty/mirror-ngx/set.lua;
#rewrite_by_lua_file /opt/openresty/mirror-ngx/rewrite.lua;
#access_by_lua_file /opt/openresty/mirror-ngx/access_all.lua;
#content_by_lua_file /opt/openresty/mirror-ngx/content.lua;
#header_filter_by_lua_file /opt/openresty/mirror-ngx/header.lua;
#body_filter_by_lua_file /opt/openresty/mirror-ngx/body.lua;
#log_by_lua_file /opt/openresty/mirror-ngx/log.lua;


server {

        listen  80 reuseport default;
        server_name localhost;

        default_type application/json;
        root html;

        #logs
        #access_log  logs/5460.log main;
        error_page   404 400 403      @error;
        error_page   500 502 503 504    @error;

        location / {
            #default_type text/html;
            #index index.html;
            #content_by_lua 'ngx.say("mirror-ngx system") ngx.exit(200)';
            #配置 nginx mirror 的服务器需要配置header头，把用户真实IP放到约定的header头中
            set_real_ip_from 172.21.4.0/24;
            set_real_ip_from 172.21.6.0/24;
            set_real_ip_from 172.21.0.0/24;
            set_real_ip_from 172.21.2.0/24;
            set_real_ip_from 127.0.0.1;
            real_ip_header X-Forwarded-For;
            #real_ip_header X-Real-IP;
            real_ip_recursive on;
            content_by_lua_file /opt/openresty/mirror-ngx/content.lua;
            log_by_lua_file /opt/openresty/mirror-ngx/log.lua;
        }

        location @error {
            # internal;
            content_by_lua_block {
                local msg = [=[{"code":"error","msg":"mirror-ngx error!"}]=]
                ngx.say(msg)
                ngx.exit(200)
            }
        }

}

server {

        listen  5460;
        server_name localhost5460;

        default_type application/json;

        #lua执行的主目录
        set $lua_path "/opt/openresty/mirror-ngx/";

        #root "${lua_path}index";
        root html;

        #logs
        # access_log  logs/mirror-ngx.log main;
        error_page   404 400 403      @error;
        error_page   500 502 503 504    @error;

        location / {
            #limit_req zone=allips burst=10 nodelay;
            default_type text/html;
            index index.html;
            content_by_lua_block {
                local msg = [=[{"code":"ok","msg":"mirror-ngx system"}]=]
                ngx.say(msg)
                ngx.exit(200)
            }
        }

        location @error {
            # internal;
            content_by_lua_block {
                local msg = [=[{"code":"error","msg":"mirror-ngx error!"}]=]
                ngx.say(msg)
                ngx.exit(200)
            }
        }

        location ~ ^/api/([-_a-zA-Z0-9/]+) {

            #default_type application/json;
            #limit_req zone=allips burst=10 nodelay;

            # 重写阶段
            #rewrite_by_lua_file "${lua_path}api_rewrite.lua"

            # 准入阶段完成参数验证
            #access_by_lua_file  "${lua_path}api_access.lua";

            #内容生成阶段
            content_by_lua_file "${lua_path}api/$1.lua";

            #内容替换阶段
            #body_filter_by_lua_file "${lua_path}api_body.lua";

            #日志处理阶段
            #log_by_lua_file "${lua_path}api_log.lua";
        }

        location ~* \.(gif|jpg|png|jpeg|bmp|css|js|flv|ico|swf|woff|eot)$ {
            access_log off;
            proxy_redirect off;
            proxy_cache_valid 200 302 6h;
            proxy_cache_valid 301 1d;
            proxy_cache_valid any 1m;
            expires 30d;
            }

}
